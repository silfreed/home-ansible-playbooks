---
# - name: debug all the things
#   debug:
#     msg: "{{ item }}"
#   loop:
#     - "Name: {{ name }}"
#     - "DHI: {{ docker_hub_image }}"
#     - "Descr: {{ description }}"
#     - "LVM: {{ lvm|default(omit) }}"
#     - "DEnv: {{ docker_env|default(omit) }}"
#     - "DVol: {{ docker_vols|default(omit) }}"
#     - "DOpt: {{ docker_options|default(omit) }}"

- name: create user for LVM mount
  become: true
  user:
    name: "{{item.user}}"
    system: yes
  loop: "{{ lvm }}"
  loop_control:
    label: "{{ item.name }}"
  when: lvm is defined and 'user' in item

# FIXME: how do we ensure the user, group, and mode _AFTER_ the volume is mounted?
- name: create LVM mount
  become: true
  file:
    path: "/mnt/{{ item.name }}"
    state: directory
    mode: "{{ item.mode|default('0750') }}"
    owner: "{{ item.user|default(omit) }}"
  loop: "{{ lvm }}"
  loop_control:
    label: "{{ item.name }}"
  when: lvm is defined

- name: collect lvs info
  tags: lvs
  become: true
  check_mode: no
  command: lvs --reportformat=json
  ignore_errors: true
  register: result
  when: lvm is defined

# - name: debug lvs result
#   debug:
#     var: result

- name: set lvs facts
  tags: lvs
  set_fact:
    lvs: "{{ result.stdout | from_json }}"
  when: lvm is defined and result is defined

# - name: debug lvs fact
#   tags: lvs
#   debug:
#     var: lvs
# - name: debug lvs lv_name list
#   tags: lvs
#   debug:
#     var: lvs.report[0].lv|map(attribute='lv_name')|list

- name: make lvm volume
  tags: mklvm
  become: true
  command: lvcreate -L {{ item.size }} {{ item.vg }} -n {{ item.name }}
  # debug:
  #   msg: "lvcreate -L {{ item.size }} {{ item.vg }} -n {{ item.name }}"
  loop: "{{ lvm }}"
  loop_control:
    label: "{{ item.name }}"
  when: lvm is defined and item.name not in lvs.report[0].lv|map(attribute='lv_name')|list

- name: format lvm volume
  tags: mklvm
  become: true
  command: mke2fs /dev/{{ item.vg }}/{{ item.name }}
  # debug:
  #   msg: "mke2fs /dev/{{ item.vg }}/{{ item.name }}"
  loop: "{{ lvm }}"
  loop_control:
    label: "{{ item.name }}"
  when: lvm is defined and item.name not in lvs.report[0].lv|map(attribute='lv_name')|list

# TODO: detect if LVM volume size is different from configured

- name: create LVM mountpoint systemd unit file
  become: true
  template:
    src: mnt-.service.j2
    dest: "/etc/systemd/system/mnt-{{ item.name }}.mount"
    mode: "0644"
    owner: root
    group: root
  loop: "{{ lvm }}"
  loop_control:
    label: "{{ item.name }}"
  # TODO: notify a handler to reload the docker instance
  when: lvm is defined

- name: create docker systemd unit file
  become: true
  template:
    src: docker@.service.j2
    dest: "/etc/systemd/system/docker@{{ name }}.service"
    mode: "0644"
    owner: root
    group: root

# FIXME: only force reload when unit files change
- name: force systemd daemon reload when unit files change
  systemd:
    daemon_reload: yes

- name: start LVM mountpoint systemd service
  become: true
  systemd:
    state: started
    enabled: yes
    name: "mnt-{{ item.name }}.mount"
  loop: "{{ lvm }}"
  loop_control:
    label: "{{ item.name }}"
  when: lvm is defined

- name: manage docker systemd unit
  become: true
  systemd:
    state: "{{ state | default('started') }}"
    enabled: "{{ enabled | default('yes') }}"
    name: "docker@{{ name }}.service"
  notify: "reload docker instance"
